%% meta
{
  "title": "What a web notebook looks like"
}

%% md
# Welcome to Iodide!

Let's get started! We'll start out right away with some pointers on how to navigate within the notebook and run cells.

If you've just landed on this page and haven't yet clicked on anything, you should be in `command mode`, and the top cell should be selected -- but just to make sure, press `esc`. Pressing `esc` at any time will return you to command mode.

Now that you're in `command mode`, try pressing the `up` and `down` arrow keys a few times. As you press up and down, the currently selected cell will move up and down. You can tell which cell is currently selected because it has a darker outline than non-selected cells.

The cell containing this text is a `markdown cell`, but it hasn't yet been evaluated; press `ctrl+enter` to evaluate it now.

If you pressed `ctrl+enter` with the cell selected, it will have re-rendered as presentational text.

Now press `enter`. The plain markdown will reappear. Pressing `enter` in command mode will allow you to edit the currently selected cell.

If you've used Jupyter, these keyboard shortcuts should be familiar -- we've tried to follow Jupyter's keyboard navigation closely so that people familiar with Jupyter will be able to get up and running quickly.

To evaluate this cell and advance to the next, press `shift+enter`

Of course, you can also navigate with your mouse. To edit a rendered `markdown cell`, you can double click the cell. To edit any other cell, just click on the text editor within that cell.

%% js
// this is a JS code cell. We can use normal JS and browser APIs.
// try `ctrl+enter` a few times to evaluate without advancing

// try to mke a change

range = []
for (let i=0; i<10; i++){range.push(i)}
A = range.map( (x,i) => range.map( (y,j) => (Math.random()+i-.5)))

%% md {"collapsePresentationViewOutput":"COLLAPSED"}
## Markdown cell

This is written in a **Markdown cell**, which supports normal _MD formating)_


Markdown cells also support LaTeX

$$
\left[\begin{array}{c}
\mathbf{x}_{t,i}\\
\mathbf{v}_{t,i}\\
\theta_{t,i}\\
\omega_{t,i}
\end{array}\right]  =  \left[\begin{array}{c}
\mathbf{x}_{t-1,i}\\
\mathbf{v}_{t-1,i}\\
\theta_{t-1,i}\\
\omega_{t-1,i}
\end{array}\right]+\Delta\left[\begin{array}{c}
\mathbf{v}_{t-1,i}\\
\left(T_{t,i}+\epsilon_{T}\right)cos\left(\theta_{t-1,i}\right)-\rho_{\mathbf{v}}\left\Vert \mathbf{v}_{t-1,i}\right\Vert ^{2}\frac{\mathbf{v}_{t-1,i}}{\left\Vert \mathbf{v}_{t-1,i}\right\Vert }\\
\left(T_{t,i}+\epsilon_{T}\right)sin\left(\theta_{t-1,i}\right)-\rho_{\mathbf{v}}\left\Vert \mathbf{v}_{t-1,i}\right\Vert ^{2}\frac{\mathbf{v}_{t-1,i}}{\left\Vert \mathbf{v}_{t-1,i}\right\Vert }\\
\omega_{t-1,i}\\
Y_{t,i}-\rho_{\omega}\omega_{t-1,i}^{2}+\epsilon_{Y}
\end{array}\right]
$$

%% raw
this is a raw cell. it's available in jupyter, so we have it too. not clear what the use case is, but it's here in case you want it.
notice that raw cells don't wrap (unlike MD cell editors)

%% md
## External resource cell
the cell below allows you to load external scripts

%% resource
https://cdnjs.cloudflare.com/ajax/libs/three.js/88/three.min.js

%% js
// now let's define a JS function that does something cool. let's also add a really long comment so that we can make sure horizontal scrolling works as desired.
function spinCubeInTarget(targetSelector) {
    //'use strict';
    var width = 400, height = 300
    var scene = new THREE.Scene();
    var camera = new THREE.PerspectiveCamera(75, width/height, 0.1, 100);
    var renderer = new THREE.WebGLRenderer();
    renderer.setSize(width, height);
    document.body.querySelector(targetSelector).appendChild(renderer.domElement);
    var geometry = new THREE.CubeGeometry(5, 5, 5);
    var material = new THREE.MeshLambertMaterial({color: 0x00fff0 });
    var cube = new THREE.Mesh(geometry, material);
    scene.add(cube);
    camera.position.z = 12; 
    var pointLight = new THREE.PointLight(0xFFFFFF);
    pointLight.position.z = 130;
    scene.add(pointLight);
    var reqAnimFrame = window.requestAnimationFrame
    var render = function() {
        reqAnimFrame(render);
        var delta = Math.random() * (0.06 - 0.02) + 0.03;
        cube.rotation.x += delta;
        cube.rotation.y += delta;
        renderer.render(scene, camera);
    };
    render();
}

%% md
### Demo of targeting elements within a markdown cell
Markdown supports inline HTML, so we can put a div in the flow of our narrative, and target that div with normal browser APIs. Below this paragraph is a div with id="targetDiv":
<div id="targetDiv"></div>
We'll target that div with the THREE.js example we defined above.

%% js
spinCubeInTarget("#targetDiv")